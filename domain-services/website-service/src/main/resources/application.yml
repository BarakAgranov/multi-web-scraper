springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.barak.domain-services.website-service
  pathsToMatch: /**

api:

  common:
    version: 1.0.0
    title: Website Service API
    description: used for crud operations on website components (pages, web elements, etc) consumed by Search Service
    termsOfService: With great power comes great responsibility
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: Barak
      url: URL TO CONTACT
      email: agranov9@mail.com

  responseCodes:
    ok.description: OK
    alreadyExists.description: Already Exists, the specified attribute already exists and must be unique
    notFound.description: Not found, the specified id does not exist
    generalError.description: General error has occured, See response message for more information about the cause
    badRequest.description: Bad Request, invalid format of the request. See response message for more information

website-service:

  get-website:
    description: Returns a information about a website
    notes: |
      # Normal response
      If the requested website id is found the method will return information regarding:
      1. Website information
      1. Pages
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      # Expected partial and error responses
      1. If no website information is found, a **803 - Not Found** error will be returned

  create-website:
    description: Creates a website
    notes: |
      # Normal response
      Will create a new website include url, name, etc.
      # Expected error responses
      1. If a website with the same id as specified in the posted information already exists,
         an **801 - Already Exists** error with a error message will be returned
  update-website:
    description: Update a website
    notes: |
      # Normal response
      Will update a website with the new given information
      # Expected error responses
      1. If no website to update with the given id is found, a **803 - Not Found** error will be returned
  delete-website:
    description: Deletes a website
    notes: |
      # Normal response
      Website will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non-existing website will return **200 Ok**.

page-service:

  get-page:
    description: Returns information about a website page
    notes: |
      # Normal response
      If the requested page id is found the method will return information regarding:
      1. page information
      1. Website
      1. Web Elements
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      # Expected partial and error responses
      1. If no page information is found, a **803 - Not Found** error will be returned
      1. In no element found for a page, a partial response will be returned
  create-page:
    description: Creates a page
    notes: |
      # Normal response
      Will create new page include url, name, etc.
      # Expected error responses
      1. If a page with the same id as specified in the posted information already exists,
         an **801 - Already Exists** error with a error message will be returned
  update-page:
    description: Update a page
    notes: |
      # Normal response
      Will update a page with the new given information
      # Expected error responses
       1. If no page to update with the given id is found, a **803 - Not Found** error will be returned
  delete-page:
    description: Deletes a page
    notes: |
      # Normal response
      Page will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non-existing page will return **200 Ok**.

element-service:

  get-element:
    description: Returns information about element
    notes: |
      # Normal response
      If the requested element id is found the method will return information regarding:
      1. element information
      1. Web Page
      1. Element Actions
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      # Expected partial and error responses
      1. If no element information is found, a **803 - Not Found** error will be returned
      1. In no page or action are found for an element, a partial response will be returned
  create-element:
    description: Creates an element
    notes: |
      # Normal response
      Will create a new Element, include identifier, identifier type, and associated page and actions
      # Expected error responses
      1. If an Element with the same id as specified in the posted information already exists,
         an **801 - Already Exists** error with a error message will be returned
  update-element:
    description: Update an element
    notes: |
      # Normal response
      Will update an element with the new given information
      # Expected error responses
       1. If no element to update with the given id is found, a **803 - Not Found** error will be returned
  delete-element:
    description: Deletes an element
    notes: |
      # Normal response
      Element will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non-existing element will return **200 Ok**.

action-service:

  get-action:
    description: Returns information about an action to preform on a web element
    notes: |
      # Normal response
      If the requested action id is found the method will return information regarding:
      1. action information
      1. Web Element
      1. Action Conditions
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      # Expected partial and error responses
      1. If no action information is found, a **803 - Not Found** error will be returned
      1. In no element or action are found for an action, a partial response will be returned
  create-action:
    description: Creates an action
    notes: |
      # Normal response
      Will create a new Action, include action type, and conditions.
      # Expected error responses
      1. If an action with the same id as specified in the posted information already exists,
         an **801 - Already Exists** error with a error message will be returned
  update-action:
    description: Update an action
    notes: |
      # Normal response
      Will update an action we the new given information
      # Expected error responses
       1. If no action to update with the given id is found, a **803 - Not Found** error will be returned
  delete-action:
    description: Deletes an action
    notes: |
      # Normal response
      Action will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non-existing action will return **200 Ok**.

condition-service:

  get-condition:
    description: Returns information about a condition of an action
    notes: |
      # Normal response
      If the requested condition id is found the method will return information regarding:
      1. Condition information
      1. Action
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      # Expected partial and error responses
      1. If no condition information is found, a **803 - Not Found** error will be returned
      1. In no action found for a condition, a partial response will be returned
  create-condition:
    description: Creates a condition
    notes: |
      # Normal response
      Will a new condition include condition information and associated actions
      # Expected error responses
      1. If a condition with the same id as specified in the posted information already exists,
         an **801 - Already Exists** error with a error message will be returned
  update-condition:
    description: Update a condition
    notes: |
      # Normal response
      Will update a condition with the new given information
      # Expected error responses
       1. If no condition to update with the given id is found, a **803 - Not Found** error will be returned
  delete-condition:
    description: Deletes a condition
    notes: |
      # Normal response
      Condition will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non-existing condition will return **200 Ok**.

# Strongly recommended setting this property to "none" in a production environment!
spring.jpa.hibernate.ddl-auto: update

spring.datasource.hikari.initializationFailTimeout: 15000

spring.datasource:
  url: jdbc:mysql://localhost:3306/website-db
  username: root
  password: 9088007

server.port: 7001
server.error.include-message: always

app:
  search-service:
    host: localhost
    port: 7002
  scraper-service:
    host: localhost
    port: 7003
  result-service:
    host: localhost
    port: 7004

logging:
  level:
    root: INFO
    com.barak: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptior.sql.BasicBinder: TRACE

---

spring:
  config:
    activate:
      on-profile: docker

server:
  port: 8080

  app:
    website-service:
      host: search
      port: 8080
    scraper-service:
      host: scraper
      port: 8080
    result-service:
      host: result
      port: 8080

spring.datasource:
  url: jdbc:mysql://localhost:3306/website-db


